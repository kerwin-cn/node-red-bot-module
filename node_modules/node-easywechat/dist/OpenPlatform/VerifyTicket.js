'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class VerifyTicket {
    constructor(appId, key = null, cache = null) {
        this.appId = appId;
        this.key = key;
        this.cache = cache;
    }
    getKey() {
        if (!this.key) {
            this.key = `open_platform.verify_ticket.${this.appId}`;
        }
        return this.key;
    }
    setKey(key) {
        this.key = key;
        return this;
    }
    setTicket(ticket) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.cache) {
                yield this.cache.set(this.getKey(), ticket, 6000);
            }
            return this;
        });
    }
    getTicket() {
        return __awaiter(this, void 0, void 0, function* () {
            let ticket = '';
            if (this.cache) {
                ticket = yield this.cache.get(this.getKey());
            }
            if (!ticket || typeof ticket != 'string') {
                throw new Error('No component_verify_ticket found.');
            }
            return ticket;
        });
    }
}
;
module.exports = VerifyTicket;
