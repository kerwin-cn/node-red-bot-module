"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const merge = __importStar(require("merge"));
const HasAttributesMixin_1 = __importDefault(require("../Core/Mixins/HasAttributesMixin"));
const Utils_1 = require("../Core/Support/Utils");
const AuthorizerAccessToken_1 = __importDefault(require("./AuthorizerAccessToken"));
class Authorization {
    constructor(attributes = null) {
        if (attributes) {
            this.attributes = merge.recursive({}, attributes);
        }
    }
    /**
     * 获取appid
     * @returns
     */
    getAppId() {
        if (!this.attributes['authorization_info'])
            return '';
        return this.attributes['authorization_info']['authorizer_appid'] || '';
    }
    /**
     * 获取access_token
     * @returns
     */
    getAccessToken() {
        let appid = '';
        let token = '';
        if (this.attributes['authorization_info'] && this.attributes['authorization_info']['authorizer_appid']) {
            appid = this.attributes['authorization_info']['authorizer_appid'];
        }
        if (this.attributes['authorization_info'] && this.attributes['authorization_info']['authorizer_access_token']) {
            token = this.attributes['authorization_info']['authorizer_access_token'];
        }
        return new AuthorizerAccessToken_1.default(appid, token);
    }
    /**
     * 获取refresh_token
     * @returns
     */
    getRefreshToken() {
        if (!this.attributes['authorization_info'])
            return '';
        return this.attributes['authorization_info']['authorizer_refresh_token'] || '';
    }
}
;
(0, Utils_1.applyMixins)(Authorization, [HasAttributesMixin_1.default]);
module.exports = Authorization;
