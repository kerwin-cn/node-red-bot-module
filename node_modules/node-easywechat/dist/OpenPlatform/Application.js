'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const merge_1 = __importDefault(require("merge"));
const ProviderInterface_1 = __importDefault(require("node-socialite/dist/Core/ProviderInterface"));
const WeChat_1 = __importDefault(require("node-socialite/dist/Providers/WeChat"));
const Config_1 = __importDefault(require("./Config"));
const ConfigInterface_1 = __importDefault(require("../Core/Contracts/ConfigInterface"));
const Encryptor_1 = __importDefault(require("../Core/Encryptor"));
const AccessTokenAwareClient_1 = __importDefault(require("../Core/HttpClient/AccessTokenAwareClient"));
const CacheMixin_1 = __importDefault(require("../Core/Mixins/CacheMixin"));
const ClientMixin_1 = __importDefault(require("../Core/Mixins/ClientMixin"));
const ConfigMixin_1 = __importDefault(require("../Core/Mixins/ConfigMixin"));
const HttpClientMixin_1 = __importDefault(require("../Core/Mixins/HttpClientMixin"));
const ServerRequestMixin_1 = __importDefault(require("../Core/Mixins/ServerRequestMixin"));
const Utils_1 = require("../Core/Support/Utils");
const Application_1 = __importDefault(require("../OfficialAccount/Application"));
const Application_2 = __importDefault(require("./Authorizer/MiniApp/Application"));
const Account_1 = __importDefault(require("./Account"));
const Server_1 = __importDefault(require("./Server"));
const VerifyTicket_1 = __importDefault(require("./VerifyTicket"));
const ComponentAccessToken_1 = __importDefault(require("./ComponentAccessToken"));
const Authorization_1 = __importDefault(require("./Authorization"));
const AuthorizerAccessToken_1 = __importDefault(require("./AuthorizerAccessToken"));
/**
 * 开放平台应用
 */
class Application {
    constructor(config) {
        this.account = null;
        this.encryptor = null;
        this.server = null;
        this.componentAccessToken = null;
        this.verifyTicket = null;
        if (config instanceof ConfigInterface_1.default) {
            this.setConfig(config);
        }
        else {
            this.setConfig(new Config_1.default(config));
        }
    }
    getAccount() {
        if (!this.account) {
            this.account = new Account_1.default(this.config.get('app_id'), this.config.get('secret'), this.config.get('token'), this.config.get('aes_key'));
        }
        return this.account;
    }
    /**
     * 设置当前账户实例
     * @param account
     * @returns
     */
    setAccount(account) {
        this.account = account;
        return this;
    }
    getVerifyTicket() {
        if (!this.verifyTicket) {
            this.verifyTicket = new VerifyTicket_1.default(this.getAccount().getAppId(), null, this.getCache());
        }
        return this.verifyTicket;
    }
    setVerifyTicket(verifyTicket) {
        this.verifyTicket = verifyTicket;
        return this;
    }
    getEncryptor() {
        if (!this.encryptor) {
            let token = this.getAccount().getToken();
            let aesKey = this.getAccount().getAesKey();
            if (!token || !aesKey) {
                throw new Error('token or aes_key cannot be empty.');
            }
            this.encryptor = new Encryptor_1.default(this.getAccount().getAppId(), token, aesKey, this.getAccount().getAppId());
        }
        return this.encryptor;
    }
    /**
     * 设置加密机实例
     * @param encryptor
     * @returns
     */
    setEncryptor(encryptor) {
        this.encryptor = encryptor;
        return this;
    }
    getServer() {
        if (!this.server) {
            this.server = new Server_1.default(this.getAccount().getAesKey() ? this.getEncryptor() : null, this.getRequest());
        }
        else {
            this.server.setRequest(this.getRequest());
        }
        if (this.server instanceof Server_1.default) {
            this.server.withDefaultVerifyTicketHandler((message, next) => {
                const ticket = this.getVerifyTicket();
                if (typeof ticket.setTicket === 'function') {
                    ticket.setTicket(message.get('ComponentVerifyTicket'));
                }
                return next(message);
            });
        }
        return this.server;
    }
    /**
     * 设置服务端实例
     * @param server
     * @returns
     */
    setServer(server) {
        this.server = server;
        return this;
    }
    getAccessToken() {
        return this.getComponentAccessToken();
    }
    getComponentAccessToken() {
        if (!this.componentAccessToken) {
            this.componentAccessToken = new ComponentAccessToken_1.default(this.getAccount().getAppId(), this.getAccount().getSecret(), this.getVerifyTicket(), null, this.getCache(), this.getHttpClient());
        }
        return this.componentAccessToken;
    }
    /**
     * 设置AccessToken实例
     * @param accessToken
     * @returns
     */
    setComponentAccessToken(componentAccessToken) {
        this.componentAccessToken = componentAccessToken;
        return this;
    }
    /**
     * 使用授权码获取授权信息
     * @see https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/2.0/api/ThirdParty/token/authorization_info.html
     * @param authorizationCode
     * @returns
     */
    getAuthorization(authorizationCode) {
        return __awaiter(this, void 0, void 0, function* () {
            let response = (yield this.getClient().request('post', 'cgi-bin/component/api_query_auth', {
                json: {
                    component_appid: this.getAccount().getAppId(),
                    authorization_code: authorizationCode,
                }
            })).toObject();
            if (!response['authorization_info']) {
                throw new Error('Failed to get authorization_info: ' + JSON.stringify(response));
            }
            return new Authorization_1.default(response);
        });
    }
    /**
     * 获取/刷新接口调用令牌
     * @see https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/2.0/api/ThirdParty/token/api_authorizer_token.html
     * @param authorizerAppId
     * @param authorizerRefreshToken
     * @returns
     */
    refreshAuthorizerToken(authorizerAppId, authorizerRefreshToken) {
        return __awaiter(this, void 0, void 0, function* () {
            let response = (yield this.getClient().request('post', 'cgi-bin/component/api_authorizer_token', {
                json: {
                    component_appid: this.getAccount().getAppId(),
                    authorizer_appid: authorizerAppId,
                    authorizer_refresh_token: authorizerRefreshToken,
                }
            })).toObject();
            if (!response['authorizer_access_token']) {
                throw new Error('Failed to get authorizer_access_token: ' + JSON.stringify(response));
            }
            return response;
        });
    }
    /**
     * 获取预授权码
     * @see https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/2.0/api/ThirdParty/token/pre_auth_code.html
     * @returns
     */
    createPreAuthorizationCode() {
        return __awaiter(this, void 0, void 0, function* () {
            let response = (yield this.getClient().request('post', 'cgi-bin/component/api_create_preauthcode', {
                json: {
                    component_appid: this.getAccount().getAppId(),
                }
            })).toObject();
            if (!response['pre_auth_code']) {
                throw new Error('Failed to get pre_auth_code: ' + JSON.stringify(response));
            }
            return response;
        });
    }
    /**
     * 生成授权页地址
     * @param callbackUrl 授权后的回调地址
     * @param optional 预授权码，不传
     * @returns
     */
    createPreAuthorizationUrl(callbackUrl, optional) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof optional === 'string') {
                optional = {
                    pre_auth_code: optional,
                };
            }
            else if (!optional || !optional['pre_auth_code']) {
                optional = {
                    pre_auth_code: (yield this.createPreAuthorizationCode()).pre_auth_code,
                };
            }
            let queries = (0, merge_1.default)({
                component_appid: this.getAccount().getAppId(),
                redirect_uri: callbackUrl,
            }, optional);
            return `https://mp.weixin.qq.com/cgi-bin/componentloginpage?${(0, Utils_1.buildQueryString)(queries)}`;
        });
    }
    getOAuth() {
        let oauthFactory = ((app) => {
            return (new WeChat_1.default({
                client_id: app.getAccount().getAppId(),
                client_secret: app.getAccount().getSecret(),
                redirect: app.getConfig().get('oauth.redirect_url'),
            })).scopes(this.getConfig().get('oauth.scopes', 'snsapi_userinfo'));
        });
        let provider = oauthFactory.call(null, this);
        if (!(provider instanceof ProviderInterface_1.default)) {
            throw new Error(`The factory must return a \`ProviderInterface\` instance.`);
        }
        return provider;
    }
    /**
     * 根据刷新令牌获取公众号实例
     * @param appId
     * @param refreshToken
     * @param config
     * @returns
     */
    getOfficialAccountWithRefreshToken(appId_1, refreshToken_1) {
        return __awaiter(this, arguments, void 0, function* (appId, refreshToken, config = {}) {
            return this.getOfficialAccountWithAccessToken(appId, yield this.getAuthorizerAccessToken(appId, refreshToken), config);
        });
    }
    /**
     * 根据访问令牌获取公众号实例
     * @param appId
     * @param accessToken
     * @param config
     * @returns
     */
    getOfficialAccountWithAccessToken(appId, accessToken, config = {}) {
        return this.getOfficialAccount(new AuthorizerAccessToken_1.default(appId, accessToken), config);
    }
    /**
     * 获取公众号实例
     * @param authorizerAccessToken
     * @param config
     * @returns
     */
    getOfficialAccount(authorizerAccessToken, config = {}) {
        if (!(config instanceof ConfigInterface_1.default)) {
            if (typeof config !== 'object' || config === null)
                config = {};
            config.app_id = authorizerAccessToken.getAppId();
            config.token = this.config.get('token');
            config.aes_key = this.config.get('aes_key');
            config.http = this.config.get('http', {});
            config = new Config_1.default(config);
        }
        else {
            config.set('app_id', authorizerAccessToken.getAppId());
            config.set('token', this.config.get('token'));
            config.set('aes_key', this.config.get('aes_key'));
            config.set('http', this.config.get('http', {}));
        }
        let app = new Application_1.default(config);
        app.setAccessToken(authorizerAccessToken);
        app.setEncryptor(this.getEncryptor());
        app.setOAuthFactory(this.createAuthorizerOAuthFactory(authorizerAccessToken.getAppId(), config));
        return app;
    }
    /**
     * 创建第三方oauth工厂
     * @param authorizerAppId
     * @param config
     * @returns
     */
    createAuthorizerOAuthFactory(authorizerAppId, config) {
        return ((app) => {
            return (new WeChat_1.default({
                client_id: authorizerAppId,
                component: {
                    component_app_id: this.getAccount().getSecret(),
                    component_access_token: this.getComponentAccessToken().getToken(),
                },
                redirect: this.config.get('oauth.redirect_url'),
            })).scopes(config.get('oauth.scopes', 'snsapi_userinfo'));
        });
    }
    /**
     * 根据刷新令牌获取小程序实例
     * @param appId
     * @param refreshToken
     * @param config
     * @returns
     */
    getMiniAppWithRefreshToken(appId_1, refreshToken_1) {
        return __awaiter(this, arguments, void 0, function* (appId, refreshToken, config = {}) {
            return this.getMiniAppWithAccessToken(appId, yield this.getAuthorizerAccessToken(appId, refreshToken), config);
        });
    }
    /**
     * 根据访问令牌获取小程序实例
     * @param appId
     * @param accessToken
     * @param config
     * @returns
     */
    getMiniAppWithAccessToken(appId, accessToken, config = {}) {
        return this.getMiniApp(new AuthorizerAccessToken_1.default(appId, accessToken), config);
    }
    /**
     * 获取小程序实例
     * @param authorizerAccessToken
     * @param config
     * @returns
     */
    getMiniApp(authorizerAccessToken, config = {}) {
        if (!(config instanceof ConfigInterface_1.default)) {
            if (typeof config !== 'object' || config === null)
                config = {};
            config.app_id = authorizerAccessToken.getAppId();
            config.token = this.config.get('token');
            config.aes_key = this.config.get('aes_key');
            config.http = this.config.get('http');
            config = new Config_1.default(config);
        }
        else {
            config.set('app_id', authorizerAccessToken.getAppId());
            config.set('token', this.config.get('token'));
            config.set('aes_key', this.config.get('aes_key'));
            config.set('http', this.config.get('http'));
        }
        const app = new Application_2.default(config, this);
        app.setAccessToken(authorizerAccessToken);
        app.setEncryptor(this.getEncryptor());
        return app;
    }
    /**
     * 获取第三方授权令牌
     * @param appId
     * @param refreshToken
     * @returns
     */
    getAuthorizerAccessToken(appId, refreshToken) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            let md5RefreshToken = (0, Utils_1.createHash)(refreshToken, 'md5');
            let cacheKey = `open-platform.authorizer_access_token.${appId}.${md5RefreshToken}`;
            let cache = this.getCache();
            let authorizerAccessToken = yield cache.get(cacheKey);
            if (!authorizerAccessToken) {
                let response = yield this.refreshAuthorizerToken(appId, refreshToken);
                authorizerAccessToken = response['authorizer_access_token'];
                yield cache.set(cacheKey, authorizerAccessToken, ((_a = parseInt(response['expires_in'])) !== null && _a !== void 0 ? _a : 7200) - 500);
            }
            return authorizerAccessToken;
        });
    }
    createClient() {
        return (new AccessTokenAwareClient_1.default(this.getHttpClient(), this.getAccessToken(), (response) => { var _a; return (_a = response.toObject()['errcode']) !== null && _a !== void 0 ? _a : 0; }, this.getConfig().get('http.throw', true)))
            .setPresets(this.getConfig().all());
    }
    /**
     * 获取请求默认配置
     * @returns
     */
    getHttpClientDefaultOptions() {
        return (0, merge_1.default)(true, {
            baseURL: 'https://api.weixin.qq.com/',
        }, this.getConfig().get('http', {}));
    }
}
;
;
(0, Utils_1.applyMixins)(Application, [ConfigMixin_1.default, CacheMixin_1.default, ClientMixin_1.default, ServerRequestMixin_1.default, HttpClientMixin_1.default]);
module.exports = Application;
