import { OfficialAccountConfig, MiniAppConfig, LogHandler, ServerEventType, ServerHandlerClosure, PayConfig, OpenPlatformConfig, WorkConfig, OpenWorkConfig, HttpClientFailureJudgeClosure, PaymentFailHandler, PaymentAlertHandler, PaymentPaidHandler, PaymentRefundedHandler, PaymentScannedHandler } from './Types/global';
import OfficialAccount from './OfficialAccount/Application';
import MiniApp from './MiniApp/Application';
import Pay from './Pay/Application';
import OpenPlatform from './OpenPlatform/Application';
import Work from './Work/Application';
import OpenWork from './OpenWork/Application';
import CacheInterface from './Core/Contracts/CacheInterface';
import ServerRequest from './Core/Http/ServerRequest';
import FormData from 'form-data';
import OfficialAccountMessage from './OfficialAccount/Message';
import WorkMessage from './Work/Message';
import OpenPlatformMessage from './OpenPlatform/Message';
import OpenWorkMessage from './OpenWork/Message';
import { PublicKey } from './Core/Support/PublicKey';
import { PrivateKey } from './Core/Support/PrivateKey';
export { OfficialAccount, OfficialAccountConfig, MiniApp, MiniAppConfig, Pay, PayConfig, OpenPlatform, OpenPlatformConfig, Work, WorkConfig, OpenWork, OpenWorkConfig, CacheInterface, ServerRequest, LogHandler, ServerEventType, ServerHandlerClosure, PublicKey, PrivateKey, 
/**
 * 表单对象
 * @see https://github.com/axios/axios#formdata
 * @see https://github.com/form-data/form-data#readme
 */
FormData, };
/**
 * 定义公众号配置
 * @param config
 */
export declare function defineOfficialAccountConfig(config: OfficialAccountConfig): OfficialAccountConfig;
/**
 * 定义小程序配置
 * @param config
 */
export declare function defineMiniAppConfig(config: MiniAppConfig): MiniAppConfig;
/**
 * 定义支付配置
 * @param config
 */
export declare function definePayConfig(config: PayConfig): PayConfig;
/**
 * 定义开放平台配置
 * @param config
 */
export declare function defineOpenPlatformConfig(config: OpenPlatformConfig): OpenPlatformConfig;
/**
 * 定义企业微信配置
 * @param config
 */
export declare function defineWorkConfig(config: WorkConfig): WorkConfig;
/**
 * 定义企业微信开放平台配置
 * @param config
 */
export declare function defineOpenWorkConfig(config: OpenWorkConfig): OpenWorkConfig;
/**
 * 定义日志处理函数
 * @param func
 */
export declare function defineLogHandler(func: LogHandler): LogHandler;
/**
 * 定义公众号服务端消息处理函数
 * @param func
 */
export declare function defineOfficeAccountServerHandler(func: ServerHandlerClosure<OfficialAccountMessage>): ServerHandlerClosure<OfficialAccountMessage>;
/**
 * 定义小程序服务端消息处理函数
 * @param func
 */
export declare function defineMiniAppServerHandler(func: ServerHandlerClosure<OfficialAccountMessage>): ServerHandlerClosure<OfficialAccountMessage>;
/**
 * 定义企业微信服务端消息处理函数
 * @param func
 */
export declare function defineWorkServerHandler(func: ServerHandlerClosure<WorkMessage>): ServerHandlerClosure<WorkMessage>;
/**
 * 定义开放平台服务端消息处理函数
 * @param func
 */
export declare function defineOpenPlatformServerHandler(func: ServerHandlerClosure<OpenPlatformMessage>): ServerHandlerClosure<OpenPlatformMessage>;
/**
 * 定义企业微信开放平台服务端消息处理函数
 * @param func
 */
export declare function defineOpenWorkServerHandler(func: ServerHandlerClosure<OpenWorkMessage>): ServerHandlerClosure<OpenWorkMessage>;
/**
 * 定义HttpClient错误判定回调
 * @param func
 */
export declare function defineHttpClientFailureJudgeClosure(func: HttpClientFailureJudgeClosure): HttpClientFailureJudgeClosure;
/**
 * 定义支付通知错误处理函数
 * @param func
 */
export declare function definePaymentFailHandler(func: PaymentFailHandler): PaymentFailHandler;
/**
 * 定义支付业务错误处理函数
 * @param func
 */
export declare function definePaymentAlertHandler(func: PaymentAlertHandler): PaymentAlertHandler;
/**
 * 定义支付结果处理回调函数
 * @param func
 */
export declare function definePaymentPaidHandler(func: PaymentPaidHandler): PaymentPaidHandler;
/**
 * 定义退款结果处理回调函数
 * @param func
 */
export declare function definePaymentRefundedHandler(func: PaymentRefundedHandler): PaymentRefundedHandler;
/**
 * 定义扫码支付结果处理回调函数
 * @param func
 */
export declare function definePaymentScannedHandler(func: PaymentScannedHandler): PaymentScannedHandler;
