'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const merge_1 = __importDefault(require("merge"));
const Utils_1 = require("../Support/Utils");
const HttpClient_1 = __importDefault(require("./HttpClient"));
const HttpClientMethodsMixin_1 = __importDefault(require("./Mixins/HttpClientMethodsMixin"));
const PresetMixin_1 = __importDefault(require("./Mixins/PresetMixin"));
class AccessTokenAwareClient {
    constructor(client, accessToken = null, failureJudge = null, throwError = true) {
        this.client = null;
        this.accessToken = null;
        this.client = client || HttpClient_1.default.create(null, failureJudge, throwError);
        this.accessToken = accessToken;
    }
    withAccessToken(accessToken) {
        this.accessToken = accessToken;
        return this;
    }
    getInstance() {
        return this.client.getInstance();
    }
    setInstance(instance) {
        this.client.setInstance(instance);
        return this;
    }
    setLogger(logger) {
        this.client.setLogger(logger);
        return this;
    }
    request(method_1, url_1) {
        return __awaiter(this, arguments, void 0, function* (method, url, payload = {}) {
            if (this.accessToken) {
                payload.params = (0, merge_1.default)(true, payload.params || {}, yield this.accessToken.toQuery());
            }
            let options = this.mergeThenResetPrepends(payload, method);
            return this.client.request(method, (0, Utils_1.ltrim)(url, '\\/+'), options);
        });
    }
}
;
(0, Utils_1.applyMixins)(AccessTokenAwareClient, [HttpClientMethodsMixin_1.default, PresetMixin_1.default]);
module.exports = AccessTokenAwareClient;
