'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const axios_1 = __importDefault(require("axios"));
const HttpClientResponse_1 = __importDefault(require("./HttpClientResponse"));
const Utils_1 = require("../Support/Utils");
const form_data_1 = __importDefault(require("form-data"));
const axios_retry_1 = __importDefault(require("axios-retry"));
class HttpClient {
    constructor(axios, failureJudge = null, throwError = false) {
        this.axios = axios;
        this.failureJudge = failureJudge;
        this.throwError = throwError;
        /**
         * 日志处理方法
         */
        this.logger = null;
    }
    setLogger(logger) {
        this.logger = logger;
        return this;
    }
    judgeFailureUsing(closure) {
        this.failureJudge = closure;
        return this;
    }
    request(method_1, url_1) {
        return __awaiter(this, arguments, void 0, function* (method, url, payload = {}) {
            let options = Object.assign({}, payload);
            if (!options.headers)
                options.headers = {};
            options.method = method;
            options.url = url;
            if (options['xml'] !== undefined) {
                let xml = '';
                if (typeof options['xml'] === 'object') {
                    xml = (0, Utils_1.buildXml)(options['xml']);
                }
                else if (typeof options['xml'] === 'string') {
                    xml = options['xml'];
                }
                else {
                    throw new Error('The type of `xml` must be string or object.');
                }
                if (!options.headers['Content-Type'] && !options.headers['content-type']) {
                    options.headers['content-type'] = 'text/xml';
                }
                options.data = xml;
                options['xml'] = undefined;
                delete options['xml'];
            }
            if (options['json'] !== undefined) {
                let json = '';
                if (typeof options['json'] === 'object') {
                    json = JSON.stringify(options['json']);
                }
                else if (typeof options['json'] === 'string') {
                    json = options['json'];
                }
                else {
                    throw new Error('The type of `json` must be string or object.');
                }
                if (!options.headers['Content-Type'] && !options.headers['content-type']) {
                    options.headers['content-type'] = 'application/json';
                }
                options.data = json;
                options['json'] = undefined;
                delete options['json'];
            }
            if (options['formData'] && Object.keys(options['formData']).length > 0) {
                let formData = new form_data_1.default();
                if (options['formData'] instanceof form_data_1.default) {
                    formData = options['formData'];
                }
                else {
                    for (let key in options['formData']) {
                        formData.append(key, options['formData'][key]);
                    }
                }
                if (options.data)
                    for (let key in options.data) {
                        formData.append(key, options.data[key]);
                    }
                options.data = formData;
                options['formData'] = undefined;
                delete options['formData'];
            }
            // 如果 data 是 FormData 对象，则从中提取 headers
            if (options.data && options.data instanceof form_data_1.default) {
                options.headers = Object.assign(Object.assign({}, (yield this.getFormDataHeaders(options.data))), options.headers);
            }
            // 是否抛出异常
            options.validateStatus = (status) => {
                return this.throwError ? status >= 200 && status < 300 : true;
            };
            let starttime = Date.now();
            if (typeof this.logger === 'function') {
                yield this.logger('before', options);
            }
            let response = yield this.axios.request(options);
            if (typeof this.logger === 'function') {
                let usedTime = Date.now() - starttime;
                yield this.logger('after', options, usedTime, response);
            }
            let resp = new HttpClientResponse_1.default(response, this.failureJudge, this.throwError);
            yield resp.parseContent(this.throwError);
            return resp;
        });
    }
    getInstance() {
        return this.axios;
    }
    setInstance(instance) {
        this.axios = instance;
        return this;
    }
    /**
     * 获取 FormData 对象的 headers
     * @param formData
     * @returns
     */
    getFormDataHeaders(formData) {
        return new Promise((resolve, reject) => {
            let headers = formData.getHeaders();
            formData.getLength(function (err, length) {
                if (err) {
                    headers['content-length'] = 0;
                }
                else {
                    headers['content-length'] = length;
                }
                resolve(headers);
            });
        });
    }
    /**
     * 创建http客户端
     * @param config
     * @returns
     */
    static create(config = null, failureJudge = null, throwError = false) {
        let axios = axios_1.default.create(config);
        if (config && config.retry) {
            (0, axios_retry_1.default)(axios, config.retry);
        }
        return new HttpClient(axios, failureJudge, throwError);
    }
}
module.exports = HttpClient;
