'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const fs_1 = __importDefault(require("fs"));
const Utils_1 = require("../Support/Utils");
const Response_1 = __importDefault(require("../Http/Response"));
class HttpClientResponse {
    constructor(response, failureJudge = null, throwError = false) {
        this.response = response;
        this.failureJudge = failureJudge;
        this.throwError = throwError;
        this.parsedContent = null;
    }
    /**
     * 设置解析后的body内容
     * @param content
     * @returns
     */
    setParsedContent(content) {
        this.parsedContent = content;
        return this;
    }
    /**
     * 解析body内容
     * @param throwError
     * @returns
     */
    parseContent() {
        return __awaiter(this, arguments, void 0, function* (throwError = false) {
            throwError = throwError !== null && throwError !== void 0 ? throwError : this.throwError;
            let content = this.response.data;
            if (!content) {
                if (throwError) {
                    throw new Error('Response body is empty.');
                }
                return;
            }
            if (typeof content === 'string') {
                if (this.is('xml') || content.indexOf('<xml>') > -1) {
                    this.parsedContent = yield (0, Utils_1.parseXml)(content);
                }
                else if (this.is('json')) {
                    try {
                        this.parsedContent = JSON.parse(content);
                    }
                    catch (e) {
                        if (throwError) {
                            throw new Error('Fail to parse JSON content.');
                        }
                    }
                }
                else {
                    try {
                        this.parsedContent = (0, Utils_1.parseQueryString)(content);
                    }
                    catch (e) {
                        if (throwError) {
                            throw new Error('Fail to parse QueryString content.');
                        }
                        this.parsedContent = {};
                    }
                }
            }
            else if (!Buffer.isBuffer(content)) {
                this.parsedContent = content;
            }
        });
    }
    withThrowError(throwError) {
        this.throwError = throwError;
        return this;
    }
    throwOnFailure() {
        return this.withThrowError(true);
    }
    quietly() {
        return this.withThrowError(false);
    }
    /**
     * 设置错误判断方法
     * @param closure
     * @returns
     */
    judgeFailureUsing(closure) {
        this.failureJudge = closure;
        return this;
    }
    /**
     * 获取请求是否失败
     * @returns
     */
    isFailed() {
        if (this.is('text') && this.failureJudge) {
            return this.failureJudge(this);
        }
        try {
            return 400 <= this.getStatusCode();
        }
        catch (e) {
            return true;
        }
    }
    /**
     * 获取请求是否成功
     * @returns
     */
    isSuccessful() {
        return !this.isFailed();
    }
    /**
     * 返回对象格式
     * @returns
     */
    toObject() {
        return this.parsedContent;
    }
    /**
     * 返回json字符串
     * @returns
     */
    toJson() {
        return JSON.stringify(this.toObject());
    }
    /**
     * 返回字符串
     * @returns
     */
    toString() {
        let obj = this.getContent();
        return (typeof obj === 'object' && obj !== null) ? JSON.stringify(obj) : String(obj);
    }
    /**
     * 另存为文件
     * @param filename 完整的文件名（含路径）
     * @returns
     */
    saveAs(filename) {
        let buffer = this.response.data;
        let content = buffer.toString();
        if (!content || '{' === content[0]) {
            throw new Error('Invalid media response content.');
        }
        fs_1.default.writeFileSync(filename, buffer);
        return filename;
    }
    /**
     * 返回base64字符串
     * @returns
     */
    toDataUrl() {
        return 'data:' + this.getHeader('content-type') + ';base64,' + this.response.data.toString('base64');
    }
    /**
     * 判断 content-type 是否指定类型
     * @param type
     * @returns
     */
    is(type) {
        let contentType = this.getHeader('content-type');
        if (!contentType)
            return false;
        let res = false;
        switch (type.toLowerCase()) {
            case 'json':
                res = contentType.indexOf('/json') > -1;
                break;
            case 'xml':
                res = contentType.indexOf('/xml') > -1;
                break;
            case 'html':
                res = contentType.indexOf('/html') > -1;
                break;
            case 'image':
                res = contentType.indexOf('image/') > -1;
                break;
            case 'audio':
                res = contentType.indexOf('audio/') > -1;
                break;
            case 'video':
                res = contentType.indexOf('video/') > -1;
                break;
            case 'text':
                res = contentType.indexOf('text/') > -1
                    || contentType.indexOf('/json') > -1
                    || contentType.indexOf('/xml') > -1;
                break;
        }
        return res;
    }
    /**
     * 判断header是否存在
     * @param key
     * @returns
     */
    hasHeader(key) {
        return Object.keys(this.getHeaders()).findIndex(o => o === key) > -1;
    }
    /**
     * 获取单个header
     * @param key
     * @returns
     */
    getHeader(key) {
        return this.getHeaders()[key] || null;
    }
    getStatusCode() {
        return this.response.status;
    }
    getHeaders(throwError) {
        for (let key in this.response.headers) {
            if (key !== key.toLowerCase()) {
                this.response.headers[key.toLowerCase()] = this.response.headers[key];
            }
        }
        return this.response.headers;
    }
    getContent(throwError) {
        return this.response.data;
    }
    cancel() {
    }
    getInfo(type) {
        return this.response.config;
    }
    offsetExists(key) {
        return __awaiter(this, void 0, void 0, function* () {
            return Object.keys(yield this.toObject()).findIndex(o => o === key) > -1;
        });
    }
    offsetGet(key) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.toObject())[key] || null;
        });
    }
    /**
     * 转换为标准的 http 响应类
     */
    toHttpResponse() {
        return new Response_1.default(this.response.status, this.getHeaders(), this.toString());
    }
}
module.exports = HttpClientResponse;
