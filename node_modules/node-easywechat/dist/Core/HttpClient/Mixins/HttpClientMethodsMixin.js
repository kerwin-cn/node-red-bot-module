'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const HttpClientInterface_1 = __importDefault(require("../Contracts/HttpClientInterface"));
const merge_1 = __importDefault(require("merge"));
class HttpClientMethodsMixin extends HttpClientInterface_1.default {
    /**
     * 发送get请求
     * @param url 请求地址
     * @param payload axios配置项
     * @returns
     */
    get(url_1) {
        return __awaiter(this, arguments, void 0, function* (url, payload = {}) {
            return this.request('get', url, payload);
        });
    }
    /**
     * 发送post请求
     * @param url 请求地址
     * @param payload axios配置项
     * @returns
     */
    post(url_1) {
        return __awaiter(this, arguments, void 0, function* (url, payload = {}) {
            return this.request('post', url, payload);
        });
    }
    /**
     * 发送patch请求
     * @param url 请求地址
     * @param payload axios配置项
     * @returns
     */
    patch(url_1) {
        return __awaiter(this, arguments, void 0, function* (url, payload = {}) {
            return this.request('patch', url, payload);
        });
    }
    /**
     * 发送put请求
     * @param url
     * @param payload axios配置项
     * @returns
     */
    put(url_1) {
        return __awaiter(this, arguments, void 0, function* (url, payload = {}) {
            return this.request('put', url, payload);
        });
    }
    /**
     * 发送delete请求
     * @param url
     * @param payload axios配置项
     * @returns
     */
    delete(url_1) {
        return __awaiter(this, arguments, void 0, function* (url, payload = {}) {
            return this.request('delete', url, payload);
        });
    }
    /**
     * 发送post请求（JSON数据）
     * @param url 请求地址
     * @param data JSON对象
     * @param payload axios配置项
     * @returns
     */
    postJson(url_1, data_1) {
        return __awaiter(this, arguments, void 0, function* (url, data, payload = {}) {
            if (!payload)
                payload = {};
            if (!payload['headers'])
                payload['headers'] = {};
            payload['headers']['Content-Type'] = 'application/json';
            payload.json = merge_1.default.recursive({}, data);
            return this.request('post', url, payload);
        });
    }
    /**
     * 发送patch请求（JSON数据）
     * @param url 请求地址
     * @param data JSON 对象
     * @param payload axios配置项
     * @returns
     */
    patchJson(url_1, data_1) {
        return __awaiter(this, arguments, void 0, function* (url, data, payload = {}) {
            if (!payload)
                payload = {};
            if (!payload['headers'])
                payload['headers'] = {};
            payload['headers']['Content-Type'] = 'application/json';
            payload.json = merge_1.default.recursive({}, data);
            return this.request('patch', url, payload);
        });
    }
    /**
     * 发送post请求（XML数据）
     * @param url 请求地址
     * @param data XML字符串 或 键值对
     * @param payload axios配置项
     * @returns
     */
    postXml(url_1, data_1) {
        return __awaiter(this, arguments, void 0, function* (url, data, payload = {}) {
            if (!payload)
                payload = {};
            if (!payload['headers'])
                payload['headers'] = {};
            payload['headers']['Content-Type'] = 'text/xml';
            payload.xml = typeof data === 'object' ? merge_1.default.recursive({}, data) : data;
            return this.request('post', url, payload);
        });
    }
}
module.exports = HttpClientMethodsMixin;
