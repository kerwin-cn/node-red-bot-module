'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const merge_1 = __importDefault(require("merge"));
const raw_body_1 = __importDefault(require("raw-body"));
const url_1 = require("url");
const Utils_1 = require("../Support/Utils");
const MessageMixin_1 = __importDefault(require("./Minxins/MessageMixin"));
const RequestMixin_1 = __importDefault(require("./Minxins/RequestMixin"));
/**
 * 服务器收到的请求对象
 */
class ServerRequest {
    constructor(method, url, headers = {}, body = null, version = 'v1.1', serverParams = {}) {
        this.attributes = {};
        this.cookieParams = {};
        this.parsedBody = {};
        this.queryParams = {};
        this.serverParams = {};
        this.uploadedFiles = {};
        this.serverParams = serverParams;
        this.withMethod(method)
            .withUri(url)
            .setHeaders(headers || {})
            .withProtocolVersion(version)
            .withQueryParams((0, url_1.parse)(url, true).query || {});
        if (body) {
            this.withBody(body);
        }
    }
    /**
     * 解析 body 内容
     * 支持 JSON字符串、XML字符串、QueryString等格式
     */
    parseBody() {
        return __awaiter(this, void 0, void 0, function* () {
            let body = this.content.toString();
            if (body.startsWith('<xml')) {
                let res = yield (0, Utils_1.parseXml)(body);
                this.parsedBody = res;
                this.headers['content-type'] = 'text/xml';
            }
            else if (body.startsWith('{') || body.startsWith('[')) {
                try {
                    this.parsedBody = JSON.parse(body);
                    this.headers['content-type'] = 'application/json';
                }
                catch (e) {
                    this.parsedBody = {};
                }
            }
            else {
                try {
                    this.parsedBody = (0, Utils_1.parseQueryString)(body);
                    this.headers['content-type'] = 'application/x-www-form-urlencoded';
                }
                catch (e) {
                    this.parsedBody = {};
                }
            }
        });
    }
    getServerParams() {
        return this.serverParams;
    }
    getCookieParams() {
        return this.cookieParams;
    }
    withCookieParams(cookies) {
        this.cookieParams = merge_1.default.recursive(true, cookies);
        return this;
    }
    getQueryParams() {
        return this.queryParams;
    }
    withQueryParams(query) {
        this.queryParams = merge_1.default.recursive(true, query);
        return this;
    }
    getUploadedFiles() {
        return this.uploadedFiles;
    }
    withUploadedFiles(files) {
        this.uploadedFiles = merge_1.default.recursive(true, files);
        return this;
    }
    getParsedBody() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.parsedBody || Object.keys(this.parsedBody).length === 0) {
                yield this.parseBody();
            }
            return this.parsedBody;
        });
    }
    withParsedBody(data) {
        this.parsedBody = merge_1.default.recursive(true, data);
        return this;
    }
    getAttributes() {
        return this.attributes;
    }
    getAttribute(name, defaultValue = null) {
        if (this.attributes[name] === undefined) {
            return defaultValue;
        }
        return this.attributes[name];
    }
    withAttribute(name, value) {
        this.attributes[name] = value;
        return this;
    }
    withoutAttribute(name) {
        this.attributes[name] = undefined;
        delete this.attributes[name];
        return this;
    }
    /**
     * 通过 IncomingMessage 创建实例
     *
     * 由于 IncomingMessage 的 body 流的特殊性，某些框架（目前已知：fastify）
     * 可能会自动读取后挂载到上下文中，从而导致 node-easywechat 去尝试读取时报错。
     * 这时可以选择传入第二个参数，即 body 的内容
     *
     * @param req
     * @param body 支持 Buffer、object对象、JSON字符串、XML字符串、QueryString格式的 body 内容字符串
     * @returns
     */
    static createFromIncomingMessage(req_1) {
        return __awaiter(this, arguments, void 0, function* (req, body = null) {
            let request = new ServerRequest(req.method, req.url, req.headers || {}, body, req.httpVersion);
            if (req.method.toUpperCase() === 'POST' && !body) {
                let res = yield (0, raw_body_1.default)(req);
                request.withBody(res);
            }
            return request;
        });
    }
}
;
;
(0, Utils_1.applyMixins)(ServerRequest, [MessageMixin_1.default, RequestMixin_1.default]);
module.exports = ServerRequest;
