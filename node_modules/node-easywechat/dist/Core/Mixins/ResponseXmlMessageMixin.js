'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const merge_1 = __importDefault(require("merge"));
const Response_1 = __importDefault(require("../Http/Response"));
const Utils_1 = require("../Support/Utils");
class ResponseXmlMessageMixin {
    /**
     * 转化为回复消息
     * @returns
     */
    transformToReply(response_1, message_1) {
        return __awaiter(this, arguments, void 0, function* (response, message, encryptor = null) {
            if (!response || response === true) {
                return new Response_1.default(200, {}, 'success');
            }
            let attributes = merge_1.default.recursive({
                ToUserName: message['FromUserName'],
                FromUserName: message['ToUserName'],
                CreateTime: (0, Utils_1.getTimestamp)(),
            }, yield this.normalizeResponse(response));
            return this.createXmlResponse(attributes, encryptor);
        });
    }
    normalizeResponse(response) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof response === 'function') {
                response = yield response();
            }
            if (typeof response === 'object') {
                if (!response['MsgType']) {
                    throw new Error('`MsgType` cannot be empty.');
                }
                return response;
            }
            if (typeof response === 'string' || typeof response === 'number') {
                return {
                    MsgType: 'text',
                    Content: response,
                };
            }
            throw new Error(`Invalid Response "${response.toString()}".`);
        });
    }
    createXmlResponse(attributes, encryptor = null) {
        let xml = (0, Utils_1.buildXml)(attributes);
        return new Response_1.default(200, {
            'Content-Type': 'application/xml'
        }, encryptor ? encryptor.encrypt(xml) : xml);
    }
}
;
module.exports = ResponseXmlMessageMixin;
