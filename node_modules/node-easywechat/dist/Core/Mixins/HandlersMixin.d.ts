import { ServerHandlerClosure, ServerHandlerItem } from "../../Types/global";
import Message from "../Message";
declare class HandlersMixin {
    protected handlers: ServerHandlerItem[];
    /**
     * 获取所有处理器
     * @returns
     */
    getHandlers(): ServerHandlerItem[];
    /**
     * 创建处理器项
     * @param handler
     * @returns
     */
    createHandlerItem(handler: ServerHandlerClosure<Message>): ServerHandlerItem;
    /**
     * 计算处理器hash
     * @param handler
     * @returns
     */
    protected getHandlerHash(handler: ServerHandlerClosure<Message>): string;
    /**
     * @alias withHandler()
     */
    with(handler: ServerHandlerClosure<Message>): this;
    /**
     * 从最后添加处理器
     * @param handler
     * @returns
     */
    withHandler(handler: ServerHandlerClosure<Message>): this;
    /**
     * @alias prependHandler()
     */
    prepend(handler: ServerHandlerClosure<Message>): this;
    /**
     * 从最前添加处理器
     * @param handler
     * @returns
     */
    prependHandler(handler: ServerHandlerClosure<Message>): this;
    /**
     * @alias withoutHandler()
     */
    without(handler: ServerHandlerClosure<Message>): this;
    /**
     * 删除处理器
     * @param handler
     * @returns
     */
    withoutHandler(handler: ServerHandlerClosure<Message>): this;
    /**
     * 获取处理器的索引
     * @param handler
     * @returns
     */
    indexOf(handler: ServerHandlerClosure<Message>): number;
    /**
     * 当 value 为true或者返回true时，添加处理器
     * @param value
     * @param handler
     * @returns
     */
    when(value: boolean | Function | Promise<boolean>, handler: ServerHandlerClosure<Message>): this;
    /**
     * 执行处理器
     * @param result
     * @param payload
     * @returns
     */
    handle(result: any, payload: Message): Promise<any>;
    /**
     * 判断处理器是否已存在
     * @param handler
     * @returns
     */
    has(handler: ServerHandlerClosure): boolean;
}
export = HandlersMixin;
