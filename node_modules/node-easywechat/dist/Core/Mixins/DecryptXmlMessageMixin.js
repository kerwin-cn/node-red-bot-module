'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const Utils_1 = require("../Support/Utils");
class DecryptXmlMessageMixin {
    /**
     * 解密消息
     * @returns
     */
    decryptMessage(message, encryptor, signature, timestamp, nonce) {
        return __awaiter(this, void 0, void 0, function* () {
            let ciphertext = message['Encrypt'];
            this.validateSignature(encryptor.getToken(), ciphertext, signature, timestamp, nonce);
            let attributes = yield (0, Utils_1.parseXml)(encryptor.decrypt(ciphertext, signature, nonce, timestamp));
            message.merge(attributes);
            return message;
        });
    }
    validateSignature(token, ciphertext, signature, timestamp, nonce) {
        if (!signature) {
            throw new Error('Request signature must not be empty.');
        }
        let params = [token, timestamp, nonce, ciphertext];
        params.sort();
        if (signature !== (0, Utils_1.createHash)(params.join(''), 'sha1')) {
            throw new Error('Invalid request signature.');
        }
    }
}
;
module.exports = DecryptXmlMessageMixin;
