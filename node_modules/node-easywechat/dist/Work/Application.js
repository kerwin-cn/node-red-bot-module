'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const merge_1 = __importDefault(require("merge"));
const WeWork_1 = __importDefault(require("node-socialite/dist/Providers/WeWork"));
const Config_1 = __importDefault(require("./Config"));
const ConfigInterface_1 = __importDefault(require("../Core/Contracts/ConfigInterface"));
const Encryptor_1 = __importDefault(require("./Encryptor"));
const AccessTokenAwareClient_1 = __importDefault(require("../Core/HttpClient/AccessTokenAwareClient"));
const CacheMixin_1 = __importDefault(require("../Core/Mixins/CacheMixin"));
const ClientMixin_1 = __importDefault(require("../Core/Mixins/ClientMixin"));
const ConfigMixin_1 = __importDefault(require("../Core/Mixins/ConfigMixin"));
const HttpClientMixin_1 = __importDefault(require("../Core/Mixins/HttpClientMixin"));
const ServerRequestMixin_1 = __importDefault(require("../Core/Mixins/ServerRequestMixin"));
const Utils_1 = require("../Core/Support/Utils");
const AccessToken_1 = __importDefault(require("./AccessToken"));
const Account_1 = __importDefault(require("./Account"));
const JsApiTicket_1 = __importDefault(require("./JsApiTicket"));
const Server_1 = __importDefault(require("./Server"));
const Utils_2 = __importDefault(require("./Utils"));
/**
 * 企业微信应用
 */
class Application {
    constructor(config) {
        this.account = null;
        this.encryptor = null;
        this.server = null;
        this.accessToken = null;
        this.oauthFactory = null;
        this.ticket = null;
        this.utils = null;
        if (config instanceof ConfigInterface_1.default) {
            this.setConfig(config);
        }
        else {
            this.setConfig(new Config_1.default(config));
        }
    }
    getAccount() {
        if (!this.account) {
            this.account = new Account_1.default(this.config.get('corp_id'), this.config.get('secret'), this.config.get('token'), this.config.get('aes_key'));
        }
        return this.account;
    }
    /**
     * 设置当前账户实例
     * @param account
     * @returns
     */
    setAccount(account) {
        this.account = account;
        return this;
    }
    getEncryptor() {
        if (!this.encryptor) {
            let token = this.getAccount().getToken();
            let aesKey = this.getAccount().getAesKey();
            if (!token || !aesKey) {
                throw new Error('token or aes_key cannot be empty.');
            }
            this.encryptor = new Encryptor_1.default(this.getAccount().getCorpId(), token, aesKey);
        }
        return this.encryptor;
    }
    /**
     * 设置加密机实例
     * @param encryptor
     * @returns
     */
    setEncryptor(encryptor) {
        this.encryptor = encryptor;
        return this;
    }
    getServer() {
        if (!this.server) {
            this.server = new Server_1.default(this.getEncryptor(), this.getRequest());
        }
        else {
            this.server.setRequest(this.getRequest());
        }
        return this.server;
    }
    /**
     * 设置服务端实例
     * @param server
     * @returns
     */
    setServer(server) {
        this.server = server;
        return this;
    }
    getAccessToken() {
        if (!this.accessToken) {
            this.accessToken = new AccessToken_1.default(this.getAccount().getCorpId(), this.getAccount().getSecret(), null, this.getCache(), this.getHttpClient());
        }
        return this.accessToken;
    }
    /**
     * 设置AccessToken实例
     * @param accessToken
     * @returns
     */
    setAccessToken(accessToken) {
        this.accessToken = accessToken;
        return this;
    }
    setOAuthFactory(oauthFactory) {
        this.oauthFactory = oauthFactory;
        return this;
    }
    getOAuth() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.oauthFactory) {
                this.oauthFactory = ((app) => {
                    return new WeWork_1.default({
                        client_id: app.getAccount().getCorpId(),
                        client_secret: app.getAccount().getSecret(),
                        redirect: app.getConfig().get('oauth.redirect_url'),
                    });
                });
            }
            let provider = this.oauthFactory.call(null, this);
            if (!(provider instanceof WeWork_1.default)) {
                throw new Error(`The factory must return a \`ProviderInterface\` instance.`);
            }
            provider.withApiAccessToken(yield this.getAccessToken().getToken());
            provider.scopes(this.getConfig().get('oauth.scopes', 'snsapi_userinfo'));
            let agent_id = parseInt(this.config.get('agent_id')) || null;
            if (agent_id) {
                provider.setAgentId(agent_id);
            }
            return provider;
        });
    }
    getTicket() {
        if (!this.ticket) {
            this.ticket = new JsApiTicket_1.default(this.getAccount().getCorpId(), this.getAccount().getSecret(), null, this.getCache(), this.getClient());
        }
        return this.ticket;
    }
    /**
     * 设置JsApiTicket实例
     * @param ticket
     * @returns
     */
    setTicket(ticket) {
        this.ticket = ticket;
        return this;
    }
    /**
     * 设置工具实例
     * @param utils
     */
    setUtils(utils) {
        this.utils = utils;
    }
    getUtils() {
        if (!this.utils) {
            this.utils = new Utils_2.default(this);
        }
        return this.utils;
    }
    createClient() {
        return (new AccessTokenAwareClient_1.default(this.getHttpClient(), this.getAccessToken(), (response) => { var _a; return (_a = response.toObject()['errcode']) !== null && _a !== void 0 ? _a : 0; }, this.getConfig().get('http.throw', true)))
            .setPresets(this.getConfig().all());
    }
    /**
     * 获取请求默认配置
     * @returns
     */
    getHttpClientDefaultOptions() {
        return (0, merge_1.default)(true, {
            baseURL: 'https://qyapi.weixin.qq.com/',
        }, this.getConfig().get('http'));
    }
}
;
;
(0, Utils_1.applyMixins)(Application, [ConfigMixin_1.default, CacheMixin_1.default, ClientMixin_1.default, ServerRequestMixin_1.default, HttpClientMixin_1.default]);
module.exports = Application;
