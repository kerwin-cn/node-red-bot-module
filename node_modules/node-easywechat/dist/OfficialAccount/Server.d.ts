import ServerRequestInterface from '../Core/Http/Contracts/ServerRequestInterface';
import Encryptor from '../Core/Encryptor';
import ServerInterface from '../Core/Contracts/ServerInterface';
import Response from '../Core/Http/Response';
import Message from './Message';
import { ServerEventType, ServerHandlerClosure, ServerMessageType } from '../Types/global';
declare class Server extends ServerInterface {
    protected request: ServerRequestInterface;
    protected encryptor: Encryptor;
    constructor(request?: ServerRequestInterface, encryptor?: Encryptor);
    /**
     * 服务端消息处理
     * @returns
     */
    serve(): Promise<Response>;
    /**
     * 添加普通消息处理器
     * @param type
     * @param handler
     * @returns
     */
    addMessageListener(type: ServerMessageType, handler: ServerHandlerClosure<Message>): this;
    /**
     * 添加事件消息处理器
     * @param event
     * @param handler
     * @returns
     */
    addEventListener(event: ServerEventType, handler: ServerHandlerClosure<Message>): this;
    /**
     * 获取来自微信服务器的推送消息
     * @param request 未设置该参数时，则从当前服务端收到的请求中获取
     * @returns
     */
    getRequestMessage(request?: ServerRequestInterface): Promise<Message>;
    protected decryptRequestMessage(query: Record<string, any>): ServerHandlerClosure<Message>;
}
interface Server {
    with(next: ServerHandlerClosure<Message>): this;
    withHandler(next: ServerHandlerClosure<Message>): this;
    prepend(next: ServerHandlerClosure<Message>): this;
    prependHandler(next: ServerHandlerClosure<Message>): this;
    without(next: ServerHandlerClosure<Message>): this;
    withoutHandler(next: ServerHandlerClosure<Message>): this;
}
export = Server;
