'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const ServerInterface_1 = __importDefault(require("../Core/Contracts/ServerInterface"));
const Response_1 = __importDefault(require("../Core/Http/Response"));
const Message_1 = __importDefault(require("./Message"));
class Server extends ServerInterface_1.default {
    constructor(request = null, encryptor = null) {
        super();
        this.request = request;
        this.encryptor = encryptor;
    }
    /**
     * 服务端消息处理
     * @returns
     */
    serve() {
        return __awaiter(this, void 0, void 0, function* () {
            let echostr = this.request.getQueryParams()['echostr'] || '';
            if (!!echostr) {
                return new Response_1.default(200, { 'Content-Type': 'text/html' }, echostr);
            }
            let message = yield this.getRequestMessage(this.request);
            let query = this.request.getQueryParams();
            if (this.encryptor && query['msg_signature']) {
                this.prepend(this.decryptRequestMessage(query));
            }
            let response = yield this.handle(new Response_1.default(200, {}, 'success'), message);
            if (!(response instanceof Response_1.default)) {
                response = yield this.transformToReply(response, message, this.encryptor);
            }
            return response;
        });
    }
    /**
     * 添加普通消息处理器
     * @param type
     * @param handler
     * @returns
     */
    addMessageListener(type, handler) {
        return this.withHandler(function (message, next) {
            return __awaiter(this, void 0, void 0, function* () {
                return message.MsgType === type ? handler(message, next) : next(message);
            });
        });
    }
    /**
     * 添加事件消息处理器
     * @param event
     * @param handler
     * @returns
     */
    addEventListener(event, handler) {
        return this.withHandler(function (message, next) {
            return __awaiter(this, void 0, void 0, function* () {
                return message.Event === event ? handler(message, next) : next(message);
            });
        });
    }
    /**
     * 获取来自微信服务器的推送消息
     * @param request 未设置该参数时，则从当前服务端收到的请求中获取
     * @returns
     */
    getRequestMessage(request = null) {
        return Message_1.default.createFromRequest(request || this.request);
    }
    decryptRequestMessage(query) {
        return (message, next) => __awaiter(this, void 0, void 0, function* () {
            if (!this.encryptor)
                return null;
            yield this.decryptMessage(message, this.encryptor, query['msg_signature'] || '', query['timestamp'] || '', query['nonce'] || '');
            return next(message);
        });
    }
}
;
module.exports = Server;
